declare type GradientType = "LINEAR" | "CONIC" | "RADIAL";
declare type Gradient = { image: CanvasGradient, reset: (a?: number) => void, add: (offset: number, color: string) => void };
declare type Ease = "linear" | "cubicIn" | "cubicOut" | "cubicInOut";
declare type AnimateProps = { dur?: number, loop?: boolean, ease?: Ease, onstart?: () => void, ontick?: () => void, onpause?: () => void, onend?: () => void };

declare const PI: number, TAU: number, CLOSE = "close";
declare let frame: number, looping: boolean;
declare const getcanvas: (w?: number | undefined, h?: number | undefined, id?: string | undefined) => { width: number; height: number; ctx: CanvasRenderingContext2D; canvas: HTMLCanvasElement };
declare const pxratio: (val?: number | undefined) => number;
declare const shape: (arg?: string | undefined) => void;
declare const vertex: (x: number, y: number) => void;
declare const arc: (x1: number, y1: number, x2: number, y2: number, r: number) => void;
declare const curve: (x1: number, y1: number, x2: number, y2: number, x3?: number | undefined, y3?: number | undefined) => void;
declare const line: (x1: number, y1: number, x2: number, y2: number) => void;
declare const circle: (x: number, y: number, r?: number) => void;
declare const rect: (x: number, y: number, w?: number, h?: number, r?: number | undefined) => void;
declare const font: (size: number | string, family?: string | undefined, options?: string | undefined) => void;
declare const settext: (align: CanvasTextAlign, base?: CanvasTextBaseline | undefined, width?: number | undefined) => void;
declare const text: (content: string | number, x: number, y: number, width?: number | undefined) => void;
declare const LINEAR = "LINEAR", CONIC = "CONIC", RADIAL = "RADIAL";
declare const gradient: (type: GradientType, ...options: number[]) => Gradient;
declare const fill: (color: string | CanvasGradient | null) => void;
declare const stroke: (color: string | CanvasGradient | null, width?: number | undefined, cap?: CanvasLineCap | undefined, join?: CanvasLineJoin | undefined) => void;
declare const clear: (x?: number, y?: number, w?: number, h?: number) => void;
declare const bg: (color: string | CanvasGradient) => void;
declare const stop: () => void;
declare const loop: (drawingCallBack: FrameRequestCallback) => void;
declare const animate: (options?: AnimateProps) => {
    dur: number;
    ease: Ease;
    started: boolean;
    paused: boolean;
    ended: boolean;
    frame: number;
    time: number;
    t: number;
    onstart: (() => void) | undefined;
    ontick: (() => void) | undefined;
    onpause: (() => void) | undefined;
    onend: (() => void) | undefined;
    pause: () => void;
    play: () => void;
    on: (target: Record<string | number | symbol, unknown>, props: Record<string | number | symbol, number>) => void;
};
export { getcanvas, pxratio, shape, vertex, arc, curve, line, circle, rect, font, settext, text, LINEAR, CONIC, RADIAL, gradient, fill, stroke, clear, bg, frame, loop, stop, looping, animate, CLOSE, PI, TAU, };